@page "/login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@using Notatnik.Server
@using Notatnik.Shared
@using DNTCaptcha.Blazor
@using Notatnik.Shared.Dtos.UserDto;


<div class="container my-4">

    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <EditForm Model="user" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="user.Email" class="form-control" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="mb-3">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <div class="mb-3">
                    <label for="password">Password</label>
                    <InputText name="SecurityNumber" @bind-Value="user.EnteredCaptchaText1" />
                    <DntInputCaptcha @bind-Value="user.CaptchaText1" Language="@NumberToWordLanguage.English"
                                     DisplayMode="@DisplayMode.NumberToWord"
                                     AllowThousandsSeparators="false"
                                     Max="900"
                                     Min="1"
                                     AbsoluteExpiration="@TimeSpan.FromMinutes(2)"
                                     ShowRefreshButton="true"
                                     FontSize="21"
                                     FontName="Times New Roman"
                                     FontColor="#603F83FF"
                                     BackgroundColor="#FCF6F5FF"
                                     RandomLinesCount="2"
                                     RandomCirclesCount="6"
                                     BorderWidth="0.3"
                                     BorderColor="grey"
                                     NoisePointsCount="25"
                                     Padding="11"
                                     ShadowBlur="7"
                                     ShadowColor="navy"
                                     ShadowOffsetX="-3"
                                     ShadowOffsetY="-3"
                                     TimerInterval="@TimeSpan.FromMilliseconds(2500)"
                                     CaptchaCanvasClass=""
                                     CaptchaDivClass="d-flex justify-content-center align-self-center ms-1"
                                     RefreshButtonClass="bi-arrow-repeat btn-lg"
                                     RefreshButtonTitle="Refresh" />
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
                <button type="button" @onclick="Register" class="btn btn-primary">Register</button>
                <div class="text-danger">
                    <span>@errorMessage</span>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    UserLoginCaptcha user = new UserLoginCaptcha();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.Name != null)
        {
            NavigationManager.NavigateTo($"/home");
        }
    }

    void Register()
    {
        NavigationManager.NavigateTo($"/register");

    }
    async Task OnSubmit()
    {
        var result = await Http.PostAsJsonAsync("api/auth/login", user);

        if (!result.IsSuccessStatusCode)
        {
            errorMessage = await result.Content.ReadAsStringAsync();
            Console.WriteLine($"There was an error! {errorMessage}");
            user.Email = "";
            user.Password = "";
            return;
        }

        var token = await result.Content.ReadAsStringAsync();
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
    }
}