@page "/register"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@using Notatnik.Server
@using Notatnik.Shared
@using Radzen
@using System.Text.Json

<div class="container my-4">

    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <EditForm Model="user" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="email">Username</label>
                    <InputText id="username" @bind-Value="user.Username" class="form-control" />
                    <ValidationMessage For="@(() => user.Username)" />
                </div>
                <div class="mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="user.Email" class="form-control" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="mb-3">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <div class="mb-3">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => user.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary">Register</button>
                <button type="button" @onclick="Login" class="btn btn-primary">Login</button>

                <div class="text-danger">
                    <span>@errorMessage</span>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    UserRegisterRequest user = new UserRegisterRequest();
    private string errorMessage = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.Name != null)
        {
            NavigationManager.NavigateTo($"/home");

        }
    }
    async Task Login()
    {
        NavigationManager.NavigateTo($"/login");

    }
    async Task OnSubmit()
    {
        var result = await Http.PostAsJsonAsync("api/auth/register", user);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/login");
        }
        else
        {
            errorMessage = await result.Content.ReadAsStringAsync();
        }


    }
    void Log(string eventName, string value)
    {
        //Console.WriteLine($"{eventName}: {value}");
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //Log("InvalidSubmit", JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true }));
    }
}