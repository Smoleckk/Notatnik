@page "/notes"
@using Notatnik.Server
@using Notatnik.Shared;
@using Notatnik.Shared.Dtos.NoteDto;

@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Ganss.Xss;

@attribute [Authorize]
<RadzenButton Click=@AddNote Text="Add secure note" ButtonStyle="ButtonStyle.Dark" />
<RadzenButton Click=@AddSecureNote Text="Add note" ButtonStyle="ButtonStyle.Dark" />

<div class="container-fluid">
    <div class="row px-3">
        <div class="col-md-3 p-3">
            @if (notes != null)
            {
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Notatki</RadzenText>
                    <RadzenListBox @bind-Value=@pressNoteId Data=@notes TextProperty="Title" ValueProperty="NoteId" Change=@checkPassNeed Style="height:200px" Class="w-100" />
                </RadzenCard>
            }
            else
            {
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Notatki</RadzenText>
                    <RadzenListBox @bind-Value=@pressNoteId TextProperty="Title" ValueProperty="NoteId" Change=@checkPassNeed Style="height:200px" Class="w-100" />
                </RadzenCard>
            }

            @if (isSecure && pressNoteId > 0)
            {
                <EditForm Model="credentials" OnValidSubmit="getNoteDetails">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="password">Podaj haslo notatki</label>
                        <InputText id="password" @bind-Value="credentials.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => credentials.Password)" />
                    </div>
                    <div class="text-danger">
                        <span>@errorMessage</span>
                    </div>
                    <RadzenButton type="submit" Text="Show note details" ButtonStyle="ButtonStyle.Dark" />
                </EditForm>
            }
            @if (pressNoteId > 0 && !isSecure)
            {
                <RadzenButton Click=@getNoteDetails Text="Show note details" ButtonStyle="ButtonStyle.Dark" />
            }
        </div>
        <div class="col-md-9 p-3">
            @*<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H2">@note.Title</RadzenText>*@
            <RadzenText TextStyle="TextStyle.H3">@note.Title</RadzenText>
            <RadzenText TextStyle="TextStyle.H5">@(((MarkupString)note.Body))</RadzenText>

                @*            <RadzenCard Class="mb-3">
            <RadzenTextBox Disabled @bind-Value=@note.Title Class="w-100" />
            </RadzenCard>
            <RadzenHtmlEditor Disabled @bind-Value=@note.Body style="height: 500px; margin-bottom: 1rem;">
            <RadzenHtmlEditorUndo />
            <RadzenHtmlEditorRedo />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorBold />
            <RadzenHtmlEditorItalic />
            <RadzenHtmlEditorUnderline />
            <RadzenHtmlEditorStrikeThrough />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorColor />
            <RadzenHtmlEditorBackground />
            <RadzenHtmlEditorRemoveFormat />
            </RadzenHtmlEditor>*@
            </div>
        </div>
    </div>

    @code {
    int pressNoteId = 0;
    bool isSecure = false;
    private string notePassword = "";

    private string errorMessage = string.Empty;

    Credentials credentials = new();

    List<NoteDisplayDto> notes = new List<NoteDisplayDto>();
    NoteDisplayDto note = new NoteDisplayDto
        {
            NoteId = -1,
            Secure = false
        };

    protected override async Task OnInitializedAsync()
    {
        notes = await Http.GetFromJsonAsync<List<NoteDisplayDto>>($"/api/Note/notes-by-user");
    }
    void SecureNote()
    {
        if (note.Secure == true)
            note.Public = false;
    }


    void checkPassNeed()
    {
        credentials.Password = "";

        if (notes.FirstOrDefault(i => i.NoteId == pressNoteId).Secure)
            isSecure = true;
        else
            isSecure = false;
    }

    async Task getNoteDetails()
    {
        var sanitizer = new HtmlSanitizer();
        //sanitizer.Sanitize(e.Body)
        var result = await Http.PostAsJsonAsync($"/api/Note/note-by-user?id={pressNoteId}", credentials);

        if (result.IsSuccessStatusCode)
        {
            note = await result.Content.ReadFromJsonAsync<NoteDisplayDto>();
            errorMessage = "";
            pressNoteId = 0;
        }
        else
        {
            errorMessage = await result.Content.ReadAsStringAsync();
        }
    }

    async Task AddNote()
    {
        note = new NoteDisplayDto
            {
                NoteId = -1,
                Title = "",
                Body = "",
                Public = true,
                Secure = false,
            };
        notePassword = "";
        pressNoteId = -4;
        NavManager.NavigateTo("/add-secure-note");

    }
    async Task AddSecureNote()
    {
        note = new NoteDisplayDto
            {
                NoteId = -1,
                Title = "",
                Body = "",
                Public = true,
                Secure = false,
            };
        notePassword = "";
        pressNoteId = -4;
        NavManager.NavigateTo("/add-note");

    }
}
