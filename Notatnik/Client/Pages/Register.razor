@page "/register"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@using Notatnik.Server
@using Notatnik.Shared


@using Radzen
@using System.Text.Json

<div class="container my-4">

    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="UserRegisterRequest" Data=@user Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                <RadzenFieldset Text="Register">
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="First Name" />
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="Username" @bind-Value=@user.Username Class="w-100" />
                            <RadzenRequiredValidator Component="Username" Text="First name is required" Popup=true Style="position: absolute" />
                            <RadzenRegexValidator Component="Username" Text="You can only use a-z letters and numbers" Pattern="^[a-zA-Z0-9]+$" Popup=true Style="position: absolute" />
                            <RadzenLengthValidator Component="Username" Min="3" Text="First name should be at least 3 characters" Popup=true Style="position: absolute" />
                            <RadzenLengthValidator Component="Username" Max="10" Text="First name should be at most 10 characters" Popup=true Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Email" />
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="Email" @bind-Value=@user.Email Class="w-100" />
                            <RadzenRegexValidator Component="Username" Text="You can only use a-z letters and numbers" Pattern="^[a-zA-Z0-9]+$" Popup=true Style="position: absolute" />
                            <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=true Style="position: absolute" />
                            <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup=true Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Password" />
                        </div>
                        <div class="col">
                            <RadzenPassword style="display: block" Name="Password" @bind-Value=@user.Password Class="w-100" />
                            <RadzenRequiredValidator Component="Password" Text="Password is required" Popup=true Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Confirm Password" />
                        </div>
                        <div class="col">
                            <RadzenPassword style="display: block" Name="ConfirmPassword" @bind-Value=@user.ConfirmPassword Class="w-100" />
                            <RadzenRequiredValidator Component="ConfirmPassword" Text="ConfirmPassword is required" Popup=true Style="position: absolute" />
                        </div>
                    </div>
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>
</div>


@code {
    UserRegisterRequest user = new UserRegisterRequest();




    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.Name != null)
        {
            NavigationManager.NavigateTo($"/home");

        }
    }

    async Task OnSubmit()
    {
        var result = await Http.PostAsJsonAsync("api/auth/register", user);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/login");
        }
        else
        {

        }


    }
    void Log(string eventName, string value)
    {
        //Console.WriteLine($"{eventName}: {value}");
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //Log("InvalidSubmit", JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true }));
    }
}