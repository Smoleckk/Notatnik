@page "/notes"
@using Notatnik.Server
@using Notatnik.Shared
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
<RadzenButton Click=@addNote Text="Add new note" ButtonStyle="ButtonStyle.Dark" />

<div class="container-fluid">
    <div class="row px-3">
        <div class="col-md-3 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Notatki</RadzenText>
                <RadzenListBox @bind-Value=@pressNoteId Data=@notes TextProperty="Title" ValueProperty="NoteId" Change=@checkPassNeed Style="height:200px" Class="w-100" />
            </RadzenCard>
            @if (isSecure && pressNoteId > 0)
            {
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">To see this note, enter password</RadzenText>
                    <RadzenPassword Placeholder="Enter password..." @bind-Value=@credentials.Password Class="w-100" />
                </RadzenCard>
            }
            @if (pressNoteId > 0)
            {
                <RadzenButton Click=@getNoteDetails Text="Show note details" ButtonStyle="ButtonStyle.Dark" />

            }

        </div>
        <div class="col-md-9 p-3">
            <RadzenCard Class="mb-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Podaj tytul notatki</RadzenText>
                <RadzenTextBox @bind-Value=@note.Title Class="w-100" />
            </RadzenCard>
            @if (note.NoteId == -1)
            {
                <RadzenCard>
                    <RadzenCheckBox @bind-Value=@note.Secure Name="CheckBox1" TValue="bool" Change=@SecureNote />
                    <RadzenLabel Text="Zaszyfrowac notatke?" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    @if (!note.Secure)
                    {
                        <RadzenCheckBox @bind-Value=@note.Public Name="CheckBox1" TValue="bool" />
                        <RadzenLabel Text="Czy publiczna" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Podaj haslo notatki</RadzenText>
                        <RadzenTextBox @bind-Value=@notePassword Class="w-100" />
                    }
                </RadzenCard>
            }
            <RadzenHtmlEditor @bind-Value=@note.Body style="height: 500px; margin-bottom: 1rem;">
                <RadzenHtmlEditorUndo />
                <RadzenHtmlEditorRedo />
                <RadzenHtmlEditorSeparator />
                <RadzenHtmlEditorBold />
                <RadzenHtmlEditorItalic />
                <RadzenHtmlEditorUnderline />
                <RadzenHtmlEditorStrikeThrough />
                <RadzenHtmlEditorSeparator />
                <RadzenHtmlEditorColor />
                <RadzenHtmlEditorBackground />
                <RadzenHtmlEditorRemoveFormat />
            </RadzenHtmlEditor>
            @if (note.NoteId == -1)
            {
                <RadzenButton Click=@saveNewNote Text="Save note!" ButtonStyle="ButtonStyle.Dark" />

            }
        </div>
    </div>
</div>

@code {
    int pressNoteId = 0;
    bool isSecure = false;
    Credentials credentials = new();
    List<NoteDisplayDto> notes = new List<NoteDisplayDto>();
    NoteDisplayDto note = new NoteDisplayDto
        {
            NoteId = -1,
            Secure = false
        };
    private string surname;
    private string notePassword;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        surname = user.Identity.Name;
        notes = await Http.GetFromJsonAsync<List<NoteDisplayDto>>($"https://localhost:7288/api/Note/notes-by-user");
    }
    void SecureNote()
    {
        if (note.Secure == true)
            note.Public = false;
    }


    async Task checkPassNeed()
    {
        if (notes.FirstOrDefault(i => i.NoteId == pressNoteId).Secure)
        {
            isSecure = true;
        }
        else
        {
            isSecure = false;
            credentials.Password = "";
        }
    }

    async Task getNoteDetails()
    {
        var result = await Http.PostAsJsonAsync($"https://localhost:7288/api/Note/note-by-user?id={pressNoteId}", credentials);

        if (result.IsSuccessStatusCode)
        {
            note = await result.Content.ReadFromJsonAsync<NoteDisplayDto>();

        }
    }
    async Task addNote()
    {
        note = new NoteDisplayDto
            {
                NoteId = -1,
                Title = "",
                Body = "",
                Public = true,
                Secure = false,
            };
        notePassword = "";
        pressNoteId = -4;
    }
    async Task saveNewNote()
    {

        NoteDto noteDto = new NoteDto
            {
                Title = note.Title,
                Body = note.Body,
                Secure = note.Secure,
                Public = note.Public,
                Password = notePassword
            };
        note.Title = "";
        note.Body = "";
        note.Public = false;
        note.Secure = false;
        notePassword = "";


        await Http.PostAsJsonAsync($"https://localhost:7288/api/User/create-user-note", noteDto);
        notes = await Http.GetFromJsonAsync<List<NoteDisplayDto>>($"https://localhost:7288/api/Note/notes-by-user");

    }



}
